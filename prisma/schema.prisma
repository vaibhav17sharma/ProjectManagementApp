// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum ColumnStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum Label {
  FRONTEND
  BACKEND
  DESIGN
  DOCUMENTATION
  OTHER
}

enum Tag {
  BUG
  FEATURE
  URGENT
  TEST
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String
  deadline    DateTime
  priority    String
  label       Label
  column      ColumnStatus @default(TODO)
  assignedTo  User[]       @relation("UserTasksAssigned") // Users assigned to the task (many-to-many relation)
  tags        Tag[]

  createdById String // The user ID of the user who created the task
  createdBy   User   @relation("UserTasksCreated", fields: [createdById], references: [id]) // Relation to the user who created the task

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts     Account[]
  sessions     Session[]
  tasks        Task[]    @relation("UserTasksAssigned") // Tasks assigned to the user (many-to-many relation)
  createdTasks Task[]    @relation("UserTasksCreated") // Tasks created by the user (one-to-many relation)
}
