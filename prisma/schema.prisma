// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets   = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum ColumnStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum Label {
  FRONTEND
  BACKEND
  DESIGN
  DOCUMENTATION
  OTHER
}

enum Tag {
  BUG
  FEATURE
  URGENT
  TEST
}

enum UserRole {
  EMPLOYEE
  ADMIN
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String
  deadline    DateTime
  priority    String
  label       Label
  column      ColumnStatus @default(TODO)
  assignedTo  User[]       @relation("UserTasksAssigned") // Users assigned to the task (many-to-many relation)
  tags        Tag[]

  createdById String // The user ID of the user who created the task
  createdBy   User   @relation("UserTasksCreated", fields: [createdById], references: [id]) // Relation to the user who created the task

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  password      String?
  email         String    @unique
  emailVerified DateTime?
  token         String?
  role          UserRole  @default(EMPLOYEE)
  image         String?
  isActive      Boolean   @default(true)
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]    @relation("UserTasksAssigned") // Tasks assigned to the user (many-to-many relation)
  createdTasks  Task[]    @relation("UserTasksCreated") // Tasks created by the user (one-to-many relation)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
